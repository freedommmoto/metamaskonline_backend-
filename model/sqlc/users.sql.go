// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: users.sql

package model

import (
	"context"
)

const insertNewUser = `-- name: InsertNewUser :one
INSERT INTO users
( username, password, owner_validation )
VALUES ( $1, $2, false)
RETURNING id_user, username, password, id_line, owner_validation, created_at, modified, deleted
`

type InsertNewUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) InsertNewUser(ctx context.Context, arg InsertNewUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertNewUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.Username,
		&i.Password,
		&i.IDLine,
		&i.OwnerValidation,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}

const selectUserID = `-- name: SelectUserID :one
select id_user, username, password, id_line, owner_validation, created_at, modified, deleted
from users
where id_user = $1
  and deleted is null
`

func (q *Queries) SelectUserID(ctx context.Context, idUser int32) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUserID, idUser)
	var i User
	err := row.Scan(
		&i.IDUser,
		&i.Username,
		&i.Password,
		&i.IDLine,
		&i.OwnerValidation,
		&i.CreatedAt,
		&i.Modified,
		&i.Deleted,
	)
	return i, err
}
